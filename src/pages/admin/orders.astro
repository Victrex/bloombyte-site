---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { Order } from '../../models/Order.js';
import ecommerceConfig from '../../../public/ecommerce-config.json';

// Obtener todas las órdenes
let allOrders = [];
try {
  allOrders = await Order.getAll();
} catch (error) {
  console.error('Error loading orders:', error);
}

const { orderStatus } = ecommerceConfig;

// Calcular estadísticas con TODAS las órdenes (antes del filtro)
const stats = {
  total: allOrders.length,
  pending: allOrders.filter((o: { status: string; }) => o.status === 'pending').length,
  completed: allOrders.filter((o: { status: string; }) => o.status === 'completed').length,
  cancelled: allOrders.filter((o: { status: string; }) => o.status === 'cancelled').length
};

// Filtrar órdenes por estado si hay un query param
const statusFilter = Astro.url.searchParams.get('status');
let orders = allOrders; // Por defecto mostrar todas
if (statusFilter) {
  orders = allOrders.filter((order: { status: string; }) => order.status === statusFilter);
}
---

<AdminLayout title="Órdenes">
  <!-- Stats Cards -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
    <a href="/admin/orders" class={`bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow ${!statusFilter ? 'ring-2 ring-pink-500' : ''}`}>
      <p class="text-sm text-gray-600">Total</p>
      <p class="text-2xl font-bold text-gray-800">{stats.total}</p>
    </a>
    <a href="/admin/orders?status=pending" class={`bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow ${statusFilter === 'pending' ? 'ring-2 ring-yellow-500' : ''}`}>
      <p class="text-sm text-gray-600">Pendientes</p>
      <p class="text-2xl font-bold text-yellow-600">{stats.pending}</p>
    </a>
    <a href="/admin/orders?status=completed" class={`bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow ${statusFilter === 'completed' ? 'ring-2 ring-green-500' : ''}`}>
      <p class="text-sm text-gray-600">Completadas</p>
      <p class="text-2xl font-bold text-green-600">{stats.completed}</p>
    </a>
    <a href="/admin/orders?status=cancelled" class={`bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow ${statusFilter === 'cancelled' ? 'ring-2 ring-red-500' : ''}`}>
      <p class="text-sm text-gray-600">Canceladas</p>
      <p class="text-2xl font-bold text-red-600">{stats.cancelled}</p>
    </a>
  </div>
  
  <!-- Orders Table -->
  <div class="bg-white rounded-lg shadow-sm overflow-hidden">
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cliente</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Productos</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {orders.map((order: { id: unknown; customer_name: unknown; customer_phone: unknown; items: any[]; total: unknown; status: unknown; created_at: string | number | Date; }) => (
            <tr class="hover:bg-gray-50 order-row" data-order-id={order.id}>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                #{order.id}
              </td>
              <td class="px-6 py-4">
                <div>
                  <p class="text-sm font-medium text-gray-900">{order.customer_name}</p>
                  <p class="text-xs text-gray-500">{order.customer_phone}</p>
                </div>
              </td>
              <td class="px-6 py-4">
                <div class="text-sm">
                  {order.items.map((item: { quantity: unknown; name: unknown; }, index: number) => (
                    <p class="text-gray-700">
                      {item.quantity}x {item.name}
                      {index < order.items.length - 1 && ','}
                    </p>
                  ))}
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                L.{order.total}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <select 
                  class={`status-select text-xs font-semibold rounded-full px-3 py-1 ${
                    order.status === 'completed' ? 'bg-green-100 text-green-800' :
                    order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-red-100 text-red-800'
                  }`}
                  data-order-id={order.id}
                  data-current-status={order.status}
                >
                  {Object.entries(orderStatus).map(([value, config]) => (
                    <option value={value} selected={order.status === value}>
                      {config.icon} {config.label}
                    </option>
                  ))}
                </select>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {new Date(order.created_at).toLocaleDateString('es-HN', {
                  day: '2-digit',
                  month: 'short',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button 
                  class="view-details text-blue-600 hover:text-blue-900"
                  data-order={JSON.stringify(order)}
                >
                  Ver detalles
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      
      {orders.length === 0 && (
        <div class="text-center py-12 text-gray-500">
          <p>No hay órdenes {statusFilter ? `con estado "${orderStatus[statusFilter as keyof typeof orderStatus]?.label}"` : 'registradas'}</p>
        </div>
      )}
    </div>
  </div>
  
  <!-- Order Details Modal -->
  <div id="order-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-10 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold text-gray-900">Detalles de la Orden</h3>
        <button id="close-modal" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <div id="order-details" class="space-y-4">
        <!-- Details will be inserted here -->
      </div>
    </div>
  </div>
</AdminLayout>

<script is:inline>
  // Función para inicializar los event listeners
  function initializeEventListeners() {
    console.log('Inicializando event listeners para órdenes...');
    
    // Update order status
    const statusSelects = document.querySelectorAll('.status-select');
    statusSelects.forEach(select => {
      // Remover listeners previos
      const newSelect = select.cloneNode(true);
      select.parentNode.replaceChild(newSelect, select);
      
      newSelect.addEventListener('change', async (e) => {
        const orderId = newSelect.getAttribute('data-order-id');
        const newStatus = newSelect.value;
        const currentStatus = newSelect.getAttribute('data-current-status');
        
        if (newStatus === currentStatus) return;
        
        try {
          const response = await fetch(`/api/admin/orders/${orderId}/status`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ status: newStatus }),
          });
          
          if (response.ok) {
            // Update UI
            newSelect.setAttribute('data-current-status', newStatus);
            
            // Update select styling
            newSelect.className = `status-select text-xs font-semibold rounded-full px-3 py-1 ${
              newStatus === 'completed' ? 'bg-green-100 text-green-800' :
              newStatus === 'pending' ? 'bg-yellow-100 text-yellow-800' :
              'bg-red-100 text-red-800'
            }`;
            
            alert('Estado actualizado correctamente');
          } else {
            // Revert selection
            newSelect.value = currentStatus;
            console.error('Error updating status:', response.statusText);
            alert('Error al actualizar el estado');
          }
        } catch (error) {
          console.error('Error:', error);
          newSelect.value = currentStatus;
          alert('Error al actualizar el estado');
        }
      });
    });

    // View order details
    const viewButtons = document.querySelectorAll('.view-details');
    viewButtons.forEach(btn => {
      // Remover listeners previos
      const newBtn = btn.cloneNode(true);
      btn.parentNode.replaceChild(newBtn, btn);
      
      newBtn.addEventListener('click', () => {
        const orderData = newBtn.getAttribute('data-order');
        if (!orderData) {
          alert('No se pudo obtener la información de la orden.');
          return;
        }
        
        try {
          const order = JSON.parse(orderData);
          
          const itemsHtml = order.items.map(item => `
            <tr>
              <td class="px-3 py-2 text-sm">${item.name}</td>
              <td class="px-3 py-2 text-sm text-center">${item.quantity}</td>
              <td class="px-3 py-2 text-sm text-right">L.${item.price}</td>
              <td class="px-3 py-2 text-sm text-right font-medium">L.${(item.price * item.quantity).toFixed(2)}</td>
            </tr>
          `).join('');
          
          const detailsHtml = `
            <div class="grid grid-cols-2 gap-4 mb-4">
              <div>
                <p class="text-sm text-gray-600">Cliente</p>
                <p class="font-medium">${order.customer_name}</p>
                <p class="text-sm text-gray-500">${order.customer_phone}</p>
              </div>
              <div>
                <p class="text-sm text-gray-600">Fecha</p>
                <p class="font-medium">${new Date(order.created_at).toLocaleString('es-HN')}</p>
              </div>
            </div>
            
            <div class="border-t pt-4">
              <h4 class="font-medium mb-3">Productos</h4>
              <table class="w-full">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-3 py-2 text-left text-xs font-medium text-gray-500">Producto</th>
                    <th class="px-3 py-2 text-center text-xs font-medium text-gray-500">Cantidad</th>
                    <th class="px-3 py-2 text-right text-xs font-medium text-gray-500">Precio</th>
                    <th class="px-3 py-2 text-right text-xs font-medium text-gray-500">Subtotal</th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                  ${itemsHtml}
                </tbody>
                <tfoot class="border-t">
                  <tr>
                    <td colspan="3" class="px-3 py-2 text-right font-medium">Total:</td>
                    <td class="px-3 py-2 text-right font-bold text-lg">L.${order.total}</td>
                  </tr>
                </tfoot>
              </table>
            </div>
          `;
          
          const orderDetails = document.getElementById('order-details');
          const orderModal = document.getElementById('order-modal');
          
          if (orderDetails && orderModal) {
            orderDetails.innerHTML = detailsHtml;
            orderModal.classList.remove('hidden');
          }
        } catch (error) {
          console.error('Error parsing order data:', error);
          alert('Error al procesar los datos de la orden.');
        }
      });
    });
    
    // Close modal handlers
    const closeModal = document.getElementById('close-modal');
    const orderModal = document.getElementById('order-modal');
    
    if (closeModal) {
      closeModal.onclick = () => {
        if (orderModal) {
          orderModal.classList.add('hidden');
        }
      };
    }
    
    if (orderModal) {
      orderModal.onclick = (e) => {
        if (e.target && e.target.id === 'order-modal') {
          orderModal.classList.add('hidden');
        }
      };
    }
  }

  // Inicializar inmediatamente si el DOM ya está listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeEventListeners);
  } else {
    initializeEventListeners();
  }

  // También para navegación de Astro
  document.addEventListener('astro:page-load', initializeEventListeners);
  
  // Backup: inicializar después de un pequeño delay
  setTimeout(initializeEventListeners, 100);
</script>
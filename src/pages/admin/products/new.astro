---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import ecommerceConfig from '../../../../public/ecommerce-config.json';

const { categories } = ecommerceConfig;
---

<AdminLayout title="Nuevo Producto">
  <div class="max-w-4xl mx-auto">
    <div class="mb-6">
      <a href="/admin/products" class="text-blue-600 hover:text-blue-800 flex items-center gap-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Volver a productos
      </a>
    </div>
    
    <div class="bg-white rounded-lg shadow-sm p-8">
      <form id="product-form" class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Name -->
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
              Nombre del Producto <span class="text-red-500">*</span>
            </label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              required 
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-pink-500 focus:ring-2 focus:ring-pink-200 transition-all"
              placeholder="Ej: Rol de Chocolate Deluxe"
            />
          </div>
          
          <!-- Price -->
          <div>
            <label for="price" class="block text-sm font-medium text-gray-700 mb-2">
              Precio (L.) <span class="text-red-500">*</span>
            </label>
            <input 
              type="number" 
              id="price" 
              name="price" 
              required 
              min="0" 
              step="0.01"
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-pink-500 focus:ring-2 focus:ring-pink-200 transition-all"
              placeholder="85.00"
            />
          </div>
        </div>
        
        <!-- Description -->
        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
            Descripción <span class="text-red-500">*</span>
          </label>
          <textarea 
            id="description" 
            name="description" 
            required 
            rows="4"
            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-pink-500 focus:ring-2 focus:ring-pink-200 transition-all resize-none"
            placeholder="Describe el producto de manera atractiva..."
          ></textarea>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Category -->
          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 mb-2">
              Categoría <span class="text-red-500">*</span>
            </label>
            <select 
              id="category" 
              name="category" 
              required
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-pink-500 focus:ring-2 focus:ring-pink-200 transition-all"
            >
              <option value="">Selecciona una categoría</option>
              {categories.map(cat => (
                <option value={cat.id}>{cat.name}</option>
              ))}
            </select>
          </div>
          
          <!-- Popular -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Producto Popular
            </label>
            <div class="flex items-center gap-4 mt-3">
              <label class="flex items-center cursor-pointer">
                <input 
                  type="radio" 
                  name="is_popular" 
                  value="1"
                  class="mr-2 text-pink-500 focus:ring-pink-500"
                />
                <span>Sí</span>
              </label>
              <label class="flex items-center cursor-pointer">
                <input 
                  type="radio" 
                  name="is_popular" 
                  value="0"
                  checked
                  class="mr-2 text-pink-500 focus:ring-pink-500"
                />
                <span>No</span>
              </label>
            </div>
            <p class="text-xs text-gray-500 mt-1">Los productos populares aparecen destacados en la página principal</p>
          </div>
        </div>
          <!-- Image Upload -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Imagen del Producto
          </label>
          <div class="flex items-start gap-4">
            <!-- Preview Area -->
            <div id="image-preview" class="w-32 h-32 bg-gray-100 rounded-lg overflow-hidden flex items-center justify-center border-2 border-dashed border-gray-300">
              <span class="text-gray-400 text-xs text-center">Sin imagen</span>
            </div>
            
            <!-- Upload Area -->
            <div class="flex-1">
              <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-pink-500 transition-colors">
                <svg class="mx-auto h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                <p class="mt-2 text-sm text-gray-600">
                  <label for="image" class="cursor-pointer text-blue-600 hover:text-blue-800 font-medium">
                    Seleccionar imagen
                  </label>
                  o arrastra y suelta
                </p>
                <input type="file" id="image" name="image" accept="image/*" class="hidden" />
                <p class="text-xs text-gray-500 mt-1">PNG, JPG hasta 5MB</p>
                <div id="upload-status" class="mt-2 text-xs"></div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Actions -->
        <div class="flex gap-4 pt-6 border-t">
          <a 
            href="/admin/products" 
            class="flex-1 text-center border border-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Cancelar
          </a>
          <button 
            type="submit" 
            class="flex-1 bg-gradient-to-r from-pink-500 to-orange-500 text-white font-medium py-3 rounded-lg hover:shadow-lg transition-all duration-300"
          >
            Crear Producto
          </button>
        </div>
      </form>
    </div>
  </div>
</AdminLayout>

<script>
  const form = document.getElementById('product-form') as HTMLFormElement | null;
  const imageInput = document.getElementById('image') as HTMLInputElement | null;
  const imagePreview = document.getElementById('image-preview') as HTMLElement | null;
  const uploadStatus = document.getElementById('upload-status') as HTMLElement | null;
  
  let selectedFile: File | null = null;

  // Función para mostrar alertas
  function showAlert(message: string, type: 'error' | 'success' | 'info' = 'info') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transition-all duration-300 ${
      type === 'error' ? 'bg-red-500 text-white' :
      type === 'success' ? 'bg-green-500 text-white' :
      'bg-blue-500 text-white'
    }`;
    alertDiv.textContent = message;
    document.body.appendChild(alertDiv);
    
    setTimeout(() => {
      if (alertDiv.parentNode) {
        alertDiv.parentNode.removeChild(alertDiv);
      }
    }, 3000);
  }

  // Función para validar archivo
  function validateFile(file: File): boolean {
    const maxSize = 1 * 1024 * 1024; // 1MB máximo
    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
    
    if (!allowedTypes.includes(file.type)) {
      showAlert('Solo se permiten archivos JPEG, PNG o WebP', 'error');
      return false;
    }
    
    if (file.size > maxSize) {
      showAlert(`Archivo muy grande. Máximo: ${(maxSize / 1024 / 1024).toFixed(1)}MB`, 'error');
      return false;
    }
    
    return true;
  }

  // Función para comprimir imagen
  async function compressImage(file: File): Promise<Blob> {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        // Redimensionar manteniendo proporción
        const maxWidth = 600;
        const maxHeight = 400;
        let { width, height } = img;
        
        if (width > height) {
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }
        } else {
          if (height > maxHeight) {
            width = (width * maxHeight) / height;
            height = maxHeight;
          }
        }
        
        canvas.width = width;
        canvas.height = height;
        
        if (ctx) {
          ctx.drawImage(img, 0, 0, width, height);
          
          // Convertir con calidad reducida
          canvas.toBlob((blob) => {
            if (blob) resolve(blob);
          }, 'image/jpeg', 0.7);
        }
      };
      
      img.src = URL.createObjectURL(file);
    });
  }
  
  // Image preview functionality mejorada
  async function updateImagePreview(file: File | null) {
    if (!imagePreview) return;
    
    if (file) {
      if (!validateFile(file)) {
        if (imageInput) imageInput.value = '';
        selectedFile = null;
        imagePreview.innerHTML = '<span class="text-gray-400 text-xs text-center">Sin imagen</span>';
        if (uploadStatus) {
          uploadStatus.innerHTML = '';
        }
        return;
      }
      
      try {
        if (uploadStatus) {
          uploadStatus.innerHTML = '<span class="text-blue-500">Procesando imagen...</span>';
        }
        
        // Comprimir imagen
        const compressedBlob = await compressImage(file);
        selectedFile = new File([compressedBlob], file.name.replace(/\.[^/.]+$/, '.jpg'), { 
          type: 'image/jpeg' 
        });
        
        // Mostrar vista previa
        const reader = new FileReader();
        reader.onload = function(e) {
          if (e.target?.result && imagePreview) {
            imagePreview.innerHTML = `<img src="${e.target.result}" alt="Vista previa" class="w-full h-full object-cover" />`;
          }
        };
        reader.readAsDataURL(selectedFile);
          if (uploadStatus) {
          uploadStatus.innerHTML = `<span class="text-green-500">✓ Imagen optimizada (${(selectedFile.size / 1024).toFixed(0)}KB)</span>`;
        }
        
        showAlert('Imagen procesada correctamente', 'success');
      } catch (error) {
        console.error('Error processing image:', error);
        showAlert('Error al procesar la imagen', 'error');
        if (imageInput) imageInput.value = '';
        selectedFile = null;
        imagePreview.innerHTML = '<span class="text-gray-400 text-xs text-center">Sin imagen</span>';
        if (uploadStatus) {
          uploadStatus.innerHTML = '';
        }
      }
    } else {
      // Limpiar vista previa
      selectedFile = null;
      imagePreview.innerHTML = '<span class="text-gray-400 text-xs text-center">Sin imagen</span>';
      if (uploadStatus) {
        uploadStatus.innerHTML = '';
      }
    }
  }  
  // Event listener para selección de archivo
  imageInput?.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    const file = target.files?.[0] || null;
    updateImagePreview(file);
  });
  
  // Drag and drop functionality
  const uploadArea = imageInput?.closest('.border-dashed');
  
  if (uploadArea) {
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('border-pink-500', 'bg-pink-50');
    });
    
    uploadArea.addEventListener('dragleave', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('border-pink-500', 'bg-pink-50');
    });
    
    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('border-pink-500', 'bg-pink-50');
      
      const dragEvent = e as DragEvent;
      const files = dragEvent.dataTransfer?.files;
      if (files && files.length > 0 && imageInput) {
        imageInput.files = files;
        updateImagePreview(files[0]);
      }
    });
  }
  
  // Form submission mejorado
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const submitBtn = document.querySelector('#product-form button[type="submit"]') as HTMLButtonElement;
    
    // Agregar archivo comprimido si existe
    if (selectedFile) {
      formData.set('image', selectedFile);
    }
    
    // Deshabilitar botón y mostrar loading
    if (submitBtn) {
      submitBtn.disabled = true;
      submitBtn.textContent = 'Creando producto...';
    }
    
    try {
      const response = await fetch('/api/admin/products', {
        method: 'POST',
        body: formData
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        showAlert('Producto creado exitosamente', 'success');
        // Redirect después de un breve delay
        setTimeout(() => {
          window.location.href = '/admin/products';
        }, 1000);
      } else {
        const errorMessage = result.error || `Error ${response.status}: ${response.statusText}`;
        showAlert(errorMessage, 'error');
        console.error('Error creating product:', result);
      }
    } catch (error) {
      console.error('Network error:', error);
      showAlert('Error de conexión. Por favor, intenta de nuevo.', 'error');
    } finally {
      // Rehabilitar botón
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Crear Producto';
      }
    }
  });
</script>
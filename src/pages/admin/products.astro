---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { Product } from '../../models/Product.js';

// Obtener todos los productos
let products = [];
try {
  products = await Product.getAll();
} catch (error) {
  console.error('Error loading products:', error);
}

// Agrupar por categoría
const productsByCategory = products.reduce((acc: { [x: string]: any[]; }, product: { category: string; }) => {
  const category = product.category || 'sin-categoria';
  if (!acc[category]) acc[category] = [];
  acc[category].push(product);
  return acc;
}, {});

const categoryNames: { [key: string]: string } = {
  normal: 'Roles Clásicos',
  fruta: 'Roles Frutales',
  salado: 'Roles Salados',
  especial: 'Edición Especial'
};
---

<AdminLayout title="Productos">
  <div class="mb-6 flex justify-between items-center">
    <div>
      <p class="text-gray-600">Total de productos: {products.length}</p>
    </div>
    <a 
      href="/admin/products/new" 
      class="bg-gradient-to-r from-pink-500 to-orange-500 text-white px-6 py-3 rounded-lg font-medium hover:shadow-lg transition-all duration-300"
    >
      + Agregar Producto
    </a>
  </div>
  
  <!-- Products Table -->
  <div class="bg-white rounded-lg shadow-sm overflow-hidden">
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoría</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precio</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Popular</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {Object.entries(productsByCategory).map(([category, categoryProducts]) => (
            <>
              <tr class="bg-gray-50">
                <td colspan="5" class="px-6 py-3 text-sm font-semibold text-gray-700">
                  {categoryNames[category] || category}
                </td>
              </tr>
              {categoryProducts.map((product: {
                [x: string]: string | null | undefined; id: unknown; name: unknown; description: unknown; category: string | number; price: unknown; is_popular: any; 
                }) => (
                <tr class="hover:bg-gray-50 product-row" data-product-id={product.id}>
                  <td class="px-6 py-4">
                    <div class="flex items-center gap-4">
                        {product.image_url ? (
                        <img src={product.image_url as string} alt={product.name as string} class="w-12 h-12 object-cover rounded-lg flex-shrink-0" />
                        ) : (
                        <div class="w-12 h-12 bg-gradient-to-br from-amber-300 to-orange-400 rounded-lg flex-shrink-0"></div>
                        )}
                      <div>
                        <p class="text-sm font-medium text-gray-900">{product.name}</p>
                        <p class="text-xs text-gray-500 line-clamp-1">{product.description}</p>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
                      {categoryNames[product.category] || product.category}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    L.{product.price}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    {product.is_popular ? (
                      <span class="text-yellow-500">⭐ Sí</span>
                    ) : (
                      <span class="text-gray-400">No</span>
                    )}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <a 
                      href={`/admin/products/edit/${product.id}`}
                      class="text-blue-600 hover:text-blue-900 mr-3"
                    >
                      Editar
                    </a>
                    <button 
                      class="delete-btn text-red-600 hover:text-red-900"
                      data-product-id={product.id}
                      data-product-name={product.name}
                    >
                      Eliminar
                    </button>
                  </td>
                </tr>
              ))}
            </>
          ))}
        </tbody>
      </table>
      
      {products.length === 0 && (
        <div class="text-center py-12 text-gray-500">
          <p class="mb-4">No hay productos registrados</p>
          <a 
            href="/admin/products/new" 
            class="text-blue-600 hover:text-blue-800"
          >
            Agregar el primer producto
          </a>
        </div>
      )}
    </div>
  </div>
  
  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3 text-center">
        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
          <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">Eliminar Producto</h3>
        <p class="text-sm text-gray-500 mb-4">
          ¿Estás seguro de que deseas eliminar "<span id="product-name"></span>"? Esta acción no se puede deshacer.
        </p>
        <div class="flex gap-3">
          <button 
            id="cancel-delete" 
            class="flex-1 bg-gray-200 text-gray-800 py-2 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Cancelar
          </button>
          <button 
            id="confirm-delete" 
            class="flex-1 bg-red-600 text-white py-2 rounded-lg hover:bg-red-700 transition-colors"
          >
            Eliminar
          </button>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<style>
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  let productToDelete: string | null = null;
  
  // Initialize delete functionality
  function initializeDeleteButtons() {
    console.log('Initializing delete buttons...');
    
    // Remove any existing listeners to avoid duplicates
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.replaceWith(btn.cloneNode(true));
    });
    
    // Add event listeners to delete buttons
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const productId = btn.getAttribute('data-product-id');
        const productName = btn.getAttribute('data-product-name');
        
        productToDelete = productId;
        const productNameElement = document.getElementById('product-name');
        if (productNameElement) {
          productNameElement.textContent = productName || '';
        }
        document.getElementById('delete-modal')?.classList.remove('hidden');
      });
    });
  }
  
  // Initialize modal functionality
  function initializeModal() {
    // Cancel delete
    const cancelBtn = document.getElementById('cancel-delete');
    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        document.getElementById('delete-modal')?.classList.add('hidden');
        productToDelete = null;
      });
    }
    
    // Confirm delete
    const confirmBtn = document.getElementById('confirm-delete');
    if (confirmBtn) {
      confirmBtn.addEventListener('click', async () => {
        if (!productToDelete) return;
        
        try {
          const response = await fetch(`/api/admin/products/${productToDelete}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            // Remove row from table
            const rowToRemove = document.querySelector(`tr[data-product-id="${productToDelete}"]`);
            if (rowToRemove) {
              rowToRemove.remove();
            }
            document.getElementById('delete-modal')?.classList.add('hidden');
            
            // Show success message
            alert('Producto eliminado correctamente');
            
            // Reload if no products left
            if (document.querySelectorAll('.product-row').length === 0) {
              window.location.reload();
            }
          } else {
            alert('Error al eliminar el producto');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al eliminar el producto');
        }
        
        productToDelete = null;
      });
    }
    
    // Close modal on outside click
    const modal = document.getElementById('delete-modal');
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target && (e.target as HTMLElement).id === 'delete-modal') {
          modal.classList.add('hidden');
          productToDelete = null;
        }
      });
    }
  }
  
  // Initialize everything when page loads
  function initialize() {
    initializeDeleteButtons();
    initializeModal();
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initialize);
  
  // Re-initialize after view transitions (Astro's navigation)
  document.addEventListener('astro:page-load', initialize);
  
  // Also handle manual navigation
  document.addEventListener('astro:after-swap', initialize);
</script>